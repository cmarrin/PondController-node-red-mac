[
    {
        "id": "bf43c5ef815e2243",
        "type": "tab",
        "label": "Main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc8510542a0c163a",
        "type": "tab",
        "label": "Control Valve",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "908ffa7fd113eb03",
        "type": "tab",
        "label": "Control Lights",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2b56a08018ca8626",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Pond Controller",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a2477e05a35a266b",
        "type": "ui_tab",
        "name": "Pond Controller",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b8db7c4fd954a85d",
        "type": "ui_group",
        "name": "Control",
        "tab": "a2477e05a35a266b",
        "order": 1,
        "disp": true,
        "width": 3,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cb99c239e3a46cec",
        "type": "ui_group",
        "name": "State",
        "tab": "a2477e05a35a266b",
        "order": 2,
        "disp": true,
        "width": 3,
        "collapse": false,
        "className": ""
    },
    {
        "id": "39f99e4a62f373c8",
        "type": "serial-port",
        "serialport": "/dev/tty.usbserial-AD02CUJ5",
        "serialbaud": "2400",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "aa26cc599ef500fc",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "b8db7c4fd954a85d",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "7ea1aee8eb92b1b2",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "b8db7c4fd954a85d",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "06f5a44bf7958c8f",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "b8db7c4fd954a85d",
        "order": 5,
        "width": 3,
        "height": 1
    },
    {
        "id": "181fecb5fb0f9728",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "b8db7c4fd954a85d",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "c71692c801af58e3",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "b8db7c4fd954a85d",
        "order": 7,
        "width": 3,
        "height": 1
    },
    {
        "id": "686100a722c18393",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "b8db7c4fd954a85d",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "fb65f9c92c042ab8",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "cfb420d9f78b1e18",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "195cda0d2a7ca0df",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "22d9835d04be4fb6",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 5,
        "width": 3,
        "height": 1
    },
    {
        "id": "45f17c8f84e6d99c",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "da2983ca2b06d9d4",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 7,
        "width": 3,
        "height": 1
    },
    {
        "id": "ad0c02974936dca7",
        "type": "ui_spacer",
        "z": "bf43c5ef815e2243",
        "name": "spacer",
        "group": "cb99c239e3a46cec",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "2f87ec5f09135c88",
        "type": "ui_group",
        "name": "Lights",
        "tab": "a2477e05a35a266b",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a4242ee0a7c3d43",
        "type": "serial out",
        "z": "bf43c5ef815e2243",
        "name": "",
        "serial": "39f99e4a62f373c8",
        "x": 840,
        "y": 680,
        "wires": []
    },
    {
        "id": "f216c318626bd817",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send ConstantColor Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"adr\":0,\"cmd\":\"C\",\"size\":5,\"data\":[140,224,64,0,0]}",
        "payloadType": "json",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "d4f9c1bdf968205c",
        "type": "function",
        "z": "bf43c5ef815e2243",
        "name": "Make Light Event",
        "func": "\nfunction checksum(buf) \n{\n    var sum = 0;\n\n    for (var i = 0; i < buf.length; i++) {\n        sum += buf.readUInt8(i);\n    }\n    return sum & 0x3f;\n}\n\nfunction toChar(i)\n{\n    return String.fromCharCode(0x30 + i);\n}\n\nfunction toCharCode(i)\n{\n    return 0x30 + i;\n}\n\nvar buf = Buffer.alloc(7 + msg.payload.size);\nvar index = 0;\nbuf[index++] = \"(\".charCodeAt();\nbuf[index++] = toCharCode(msg.payload.adr);\nbuf[index++] = msg.payload.cmd.charCodeAt(0);\n\nbuf.writeUInt8((msg.payload.size >> 8) & 0xff, index++);\nbuf.writeUInt8(msg.payload.size & 0xff, index++);\n\nfor (var i = 0; i < msg.payload.size; ++i) {\n    buf.writeUInt8(msg.payload.data[i], index++);\n}\n\nvar checksumIndex = index;\nbuf[index++] = \"0\".charCodeAt();\nbuf[index++] = \")\".charCodeAt();\n\nbuf[checksumIndex] = checksum(buf) + 0x30;\n\nnode.warn(\"Serial:cmd='\" + msg.payload.cmd + \"' (cksum=\" + buf[checksumIndex] + \")\");\n\nreturn { payload : buf };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 680,
        "wires": [
            [
                "9a4242ee0a7c3d43"
            ]
        ]
    },
    {
        "id": "75966ffbb9e14ee5",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Color Off Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "command",
        "payload": "{\"adr\":0,\"cmd\":\"C\",\"size\":5,\"data\":[60,7,0,0,0]}",
        "payloadType": "json",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "aab07133f0d61167",
        "type": "link in",
        "z": "bf43c5ef815e2243",
        "name": "",
        "links": [
            "b0ae5194adc15f74",
            "2f70d95631d6b2cd"
        ],
        "x": 295,
        "y": 680,
        "wires": [
            [
                "d4f9c1bdf968205c",
                "567de1a3c9d68ca9"
            ]
        ]
    },
    {
        "id": "2f70d95631d6b2cd",
        "type": "link out",
        "z": "bf43c5ef815e2243",
        "name": "",
        "mode": "link",
        "links": [
            "aab07133f0d61167"
        ],
        "x": 855,
        "y": 320,
        "wires": []
    },
    {
        "id": "e0b3dcdae87e0e7e",
        "type": "ui_button",
        "z": "bf43c5ef815e2243",
        "name": "",
        "group": "b8db7c4fd954a85d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Close Skimmer",
        "tooltip": "Close the skimmer valve for 15 minutes",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "close",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "4401825353a8cec8"
            ]
        ]
    },
    {
        "id": "4401825353a8cec8",
        "type": "link out",
        "z": "bf43c5ef815e2243",
        "name": "Send Ctl Msg",
        "mode": "link",
        "links": [
            "e47614c49656239e"
        ],
        "x": 305,
        "y": 740,
        "wires": []
    },
    {
        "id": "64dc03adce06ec72",
        "type": "ui_text",
        "z": "bf43c5ef815e2243",
        "group": "cb99c239e3a46cec",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Skimmer Valve",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 650,
        "y": 740,
        "wires": []
    },
    {
        "id": "45b0bd1f8f25fc92",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Executable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00",
        "payloadType": "str",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "5d77bb2801589b37"
            ]
        ]
    },
    {
        "id": "5d77bb2801589b37",
        "type": "function",
        "z": "bf43c5ef815e2243",
        "name": "Build Executable Msg",
        "func": "var fs = global.get('fs')\n\nvar name = \"/Users/cmarrin/PostLightEffects.clvx\";\n\nif (!fs.existsSync(name)) {\n    node.warn(\"*** Error '\" + name + \"' does not exist\");\n} else {\n    var buf = fs.readFileSync(name);\n    var p = {\n        \"adr\": 0,\n        \"cmd\": \"X\",\n        \"size\": buf.length,\n        \"data\": buf\n    }\n    node.warn(\"*** Sending '\" + name + \"'\");\n    node.send({ payload : p });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "9a2801c53a116ac5",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Interp Flicker Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"adr\":0,\"cmd\":\"f\",\"size\":4,\"data\":[25,200,100,2]}",
        "payloadType": "json",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "0dfce1bb9a3208bc",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Interp Pulse Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"adr\":0,\"cmd\":\"p\",\"size\":5,\"data\":[50,224,200,4,7]}",
        "payloadType": "json",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "f98264a050f26a43",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Interp Rainbow Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"adr\":0,\"cmd\":\"r\",\"size\":5,\"data\":[50,255,120,15,7]}",
        "payloadType": "json",
        "x": 190,
        "y": 500,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "792e652b510131f1",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Interp Multicolor Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"adr\":0,\"cmd\":\"m\",\"size\":13,\"data\":[0,255,200,96,255,200,170,255,200,38,255,200,3]}",
        "payloadType": "json",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "eb68088678fc1656",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "POST Executable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "executable",
        "payload": "00",
        "payloadType": "str",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "567de1a3c9d68ca9"
            ]
        ]
    },
    {
        "id": "85930b171fa6428d",
        "type": "exec",
        "z": "bf43c5ef815e2243",
        "command": "curl ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 560,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "567de1a3c9d68ca9",
        "type": "function",
        "z": "bf43c5ef815e2243",
        "name": "Build Command Msg",
        "func": "function toChar(i)\n{\n    return String.fromCharCode(0x30 + i);\n}\n\nfunction toCharCode(i)\n{\n    return 0x30 + i;\n}\n\nvar uri = \"192.168.4.254\";\nvar contents = \"\";\n\nif (msg.topic == \"executable\") {\n    var file = \"/Users/cmarrin/PostLightEffects.clvx\";\n    var root = \"fs\";\n\n    contents = \" -F file=@\" + file + \" http://\" + uri + \"/\" + root;\n} else {\n    contents = \" http://\" + uri + \"/command?cmd=\";\n\n    // Add command\n    // Make enough room for 3 digit param plus comma\n    contents += msg.payload.cmd;\n\n    for (var i = 0; i < msg.payload.size; ++i) {\n        contents += \",\" + msg.payload.data[i];\n    }\n}\n\nnode.warn(\"HTTP:cmd='\" + contents + \"'\");\n\nreturn { payload : contents };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 560,
        "wires": [
            [
                "85930b171fa6428d"
            ]
        ]
    },
    {
        "id": "07fb822cd6eeb87a",
        "type": "inject",
        "z": "bf43c5ef815e2243",
        "name": "Send Flash Color Msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"adr\":0,\"cmd\":\"C\",\"size\":5,\"data\":[80,224,64,5,4]}",
        "payloadType": "json",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "dfa752999652ce15"
            ]
        ]
    },
    {
        "id": "dfa752999652ce15",
        "type": "change",
        "z": "bf43c5ef815e2243",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "command",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 320,
        "wires": [
            [
                "2f70d95631d6b2cd"
            ]
        ]
    },
    {
        "id": "fa3586050bc275eb",
        "type": "function",
        "z": "bc8510542a0c163a",
        "name": "Handle Buttons",
        "func": "if (msg.payload > 1.2 && msg.payload < 2.7) {\n    // Close valve button\n    return { \"payload\" : \"timedclose\" };\n}\n\nif (msg.payload < 4) {\n    // upper right button\n    return { \"payload\" : \"UpperRight\" };\n}\n\nif (msg.payload < 6) {\n    // lower right button\n    return { \"payload\" : \"LowerRight\" };\n}\n\nif (msg.payload < 9.2) {\n    // center button\n    return { \"payload\" : \"Center\" };\n}\n\nif (msg.payload < 10.8) {\n    // lower left button\n    return { \"payload\" : \"LowerLeft\" };\n}\n\nif (msg.payload < 11.8) {\n    // upper left button\n    return { \"payload\" : \"UpperLeft\" };\n}\n\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "653b047c20725812"
            ]
        ]
    },
    {
        "id": "3050fafe391adae3",
        "type": "trigger",
        "z": "bc8510542a0c163a",
        "name": "Run Valve Motor",
        "op1": "",
        "op2": "runmotordone",
        "op1type": "nul",
        "op2type": "str",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 520,
        "wires": [
            [
                "f45d4d2043415fe6"
            ]
        ]
    },
    {
        "id": "b8fb548653d52397",
        "type": "trigger",
        "z": "bc8510542a0c163a",
        "name": "Reopen Valve",
        "op1": "",
        "op2": "open",
        "op1type": "nul",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "stop",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 840,
        "y": 400,
        "wires": [
            [
                "f45d4d2043415fe6"
            ]
        ]
    },
    {
        "id": "f45d4d2043415fe6",
        "type": "function",
        "z": "bc8510542a0c163a",
        "name": "Manage Valve",
        "func": "// This function receives messages to \"open\", \"close\"\n// and \"stop\" the valve motor\n\nfunction makeRelayMsg(enable, id)\n{\n    return { \"topic\" : \"relay.\" + id, \"payload\" : enable };\n}\n\n// Make a message to send multiple outputs. The first sends\n// 2 messages, one to each relay. The second sends a\n// message to trigger the timer that keeps the valve\n// motor running long enough to let it open or close.\n// The third sends a message to trigger the timer that\n// tells the valve when to reopen. All params are bool.\n// Since the timers trigger on any message \"msg\" is \n// sent when startMotor or startDelay are true and\n// \"null\" when false.\nfunction makeMsg(relay1, relay2, startMotor, startDelay, stopDelay)\n{\n    var delayPayload = null;\n    if (startDelay) {\n        delayPayload = msg;\n    } else if (stopDelay) {\n        delayPayload = { \"payload\" : \"stop\" };\n    }\n    \n    return [\n        [\n            makeRelayMsg(relay1, \"one\"),\n            makeRelayMsg(relay2, \"two\")\n        ],\n        delayPayload,\n        startMotor ? msg : null\n    ];\n}\n\nif (msg.payload == \"close\") {\n    return makeMsg(false, true, true, false, true);\n}\n\nif (msg.payload == \"timedclose\") {\n    return makeMsg(false, true, true, true, false);\n}\n\nif (msg.payload == \"open\") {\n    return makeMsg(true, false, true, false, true);\n}\n\nif (msg.payload == \"stop\") {\n    return makeMsg(false, false, false, false, true);\n}\n\nif (msg.payload == \"runmotordone\") {\n    return makeMsg(false, false, false, false, false);\n}\n\nreturn null;\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "220960cc39d303aa"
            ],
            [
                "b8fb548653d52397"
            ],
            [
                "3050fafe391adae3"
            ]
        ]
    },
    {
        "id": "a2c50637acc4d0ab",
        "type": "function",
        "z": "bc8510542a0c163a",
        "name": "Control Lights",
        "func": "function makeMsg()\n{\n    return {\n        \"topic\" : \"ControlLights\", \n        \"payload\" : payloads[currentPayload]\n    };\n}\n\nif (msg.payload == \"Center\") {\n    // Go to the next command\n    if (++currentPayload >= payloads.length) {\n        currentPayload = 0;\n    }\n} else {\n    return null\n}\n\nreturn makeMsg();\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Setup the payload\n\ncurrentPayload = 0;\n\npayloads = [\n    {\n        \"adr\":  0,\n        \"cmd\":  \"C\",\n        \"hue\":  0,\n        \"sat\":  0,\n        \"val\":  0,\n        \"par1\": 0,\n        \"par2\": 0\n    },\n    {\n        \"adr\":  0,\n        \"cmd\":  \"C\",\n        \"hue\":  60,\n        \"sat\":  56,\n        \"val\":  16,\n        \"par1\": 0,\n        \"par2\": 0\n    },\n    {\n        \"adr\":  0,\n        \"cmd\":  \"F\",\n        \"hue\":  6,\n        \"sat\":  56,\n        \"val\":  32,\n        \"par1\": 0,\n        \"par2\": 0\n    },\n    {\n        \"adr\":  0,\n        \"cmd\":  \"F\",\n        \"hue\":  60,\n        \"sat\":  56,\n        \"val\":  16,\n        \"par1\": 4,\n        \"par2\": 0\n    }\n];\n\n// Array entry for each command. Each entry is\n// an array with the currentParams for that command\n// of the form [ hue, sat, val, speed ]\nvar currentParams = [\n    // \"X\" - all lights off\n    [ 0, 0, 0, 0 ],\n    \n    // \"C\" - constant color\n    [ 60, 56, 16, 0],\n    \n    // \"F\" - flicker\n    [ 6, 56, 32, 0 ],\n    \n    // \"R\" - rainbow\n    [ 0, 0, 0, 0 ]\n];\n\n// Array entry for each command. each entry is\n// an array with the sequence of params to use\n// when the buttons are pressed\nvar paramSequence = [\n    // \"X\" - all lights off\n    [ 0, 0, 0, 0 ],\n    \n    // \"C\" - constant color\n    [ 60, 56, 16, 0],\n    \n    // \"F\" - flicker\n    [ 6, 56, 32, 0 ],\n    \n    // \"R\" - rainbow\n    [ 0, 0, 0, 0 ]\n];\n",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 160,
        "wires": [
            [
                "b0ae5194adc15f74"
            ]
        ]
    },
    {
        "id": "b0ae5194adc15f74",
        "type": "link out",
        "z": "bc8510542a0c163a",
        "name": "",
        "mode": "link",
        "links": [
            "aab07133f0d61167"
        ],
        "x": 715,
        "y": 160,
        "wires": []
    },
    {
        "id": "e47614c49656239e",
        "type": "link in",
        "z": "bc8510542a0c163a",
        "name": "Receive Ctl Msg",
        "links": [
            "653b047c20725812",
            "4401825353a8cec8"
        ],
        "x": 435,
        "y": 280,
        "wires": [
            [
                "a2c50637acc4d0ab",
                "f45d4d2043415fe6",
                "c335ab41f7baf9f5"
            ]
        ]
    },
    {
        "id": "653b047c20725812",
        "type": "link out",
        "z": "bc8510542a0c163a",
        "name": "Send Ctl Msg",
        "mode": "link",
        "links": [
            "e47614c49656239e"
        ],
        "x": 355,
        "y": 280,
        "wires": []
    },
    {
        "id": "c335ab41f7baf9f5",
        "type": "debug",
        "z": "bc8510542a0c163a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "49bdab46da813319",
        "type": "inject",
        "z": "bc8510542a0c163a",
        "name": "Open Skimmer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "open",
        "payloadType": "str",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "f45d4d2043415fe6"
            ]
        ]
    },
    {
        "id": "220960cc39d303aa",
        "type": "debug",
        "z": "bc8510542a0c163a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 300,
        "wires": []
    },
    {
        "id": "a5a97b1708e1149d",
        "type": "inject",
        "z": "bc8510542a0c163a",
        "name": "Close Skimmer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "close",
        "payloadType": "str",
        "x": 200,
        "y": 420,
        "wires": [
            [
                "f45d4d2043415fe6"
            ]
        ]
    },
    {
        "id": "3545517c8e5e36ac",
        "type": "inject",
        "z": "bc8510542a0c163a",
        "name": "Timed Close Skimmer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "timedclose",
        "payloadType": "str",
        "x": 220,
        "y": 480,
        "wires": [
            [
                "f45d4d2043415fe6"
            ]
        ]
    },
    {
        "id": "e61567f4096e2f55",
        "type": "function",
        "z": "908ffa7fd113eb03",
        "name": "String to Light Command",
        "func": "function makeMsg(adr, cmd, data)\n{\n    return {\n        \"topic\" : \"ControlLights\", \n        \"payload\" : {\n            \"adr\": adr,\n            \"cmd\": cmd,\n            \"size\": data.length,\n            \"data\": data\n        }\n    };\n}\n\nvar effect = msg.payload;\n\nvar brightness = global.get(\"LightBrightnesses\")[global.get(\"LightEffect\")];\nif (brightness == undefined) {\n    brightness = 255;\n}\n\nvar color = global.get(\"LightColors\")[global.get(\"LightEffect\")];\nif (color == undefined) {\n    color = { h : 0, s : 0 };\n}\nvar hue = Math.round(color.h / 355 * 255);\nvar sat = Math.round(color.s * 255);\n\n//node.warn(\"*** hue=\" + hue + \", sat=\" + sat + \", brightness=\" + brightness)\n\nswitch (effect) {\n    case \"CenterButton\":\n    case \"LightOff\":\n        return makeMsg(0, \"C\", [ 0, 0, 0, 0, 0 ]);\n    case \"UpperLeftButton\":\n    case \"LightColor\":\n        return makeMsg(0, \"C\", [hue, sat, brightness, 0, 0]);\n    case \"LowerLeftButton\":\n    case \"LightFlicker\":\n        return makeMsg(0, \"f\", [hue, sat, brightness, 2 ]);\n    case \"LightPulse\":\n        return makeMsg(0, \"p\", [hue, sat, brightness, 5, 5 ]);\n    case \"LowerRightButton\":\n    case \"LightMulti\":\n        return makeMsg(0, \"m\", [\n              0, 255, brightness, \n             96, 255, brightness,\n            170, 255, brightness,\n             38, 255, brightness, 100 ]);\n    case \"UpperRightButton\":\n    case \"LightRainbow\":\n        return makeMsg(0, \"r\", [0, 224, brightness, 15, 0, 1 ]);\n\n    default:            return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Setup the payload\n\ncurrentPayload = 0;\n\npayloads = [\n    {\n        \"adr\":  0,\n        \"cmd\":  \"C\",\n        \"hue\":  0,\n        \"sat\":  0,\n        \"val\":  0,\n        \"par1\": 0,\n        \"par2\": 0\n    },\n    {\n        \"adr\":  0,\n        \"cmd\":  \"C\",\n        \"hue\":  60,\n        \"sat\":  56,\n        \"val\":  16,\n        \"par1\": 0,\n        \"par2\": 0\n    },\n    {\n        \"adr\":  0,\n        \"cmd\":  \"F\",\n        \"hue\":  6,\n        \"sat\":  56,\n        \"val\":  32,\n        \"par1\": 0,\n        \"par2\": 0\n    },\n    {\n        \"adr\":  0,\n        \"cmd\":  \"F\",\n        \"hue\":  60,\n        \"sat\":  56,\n        \"val\":  16,\n        \"par1\": 4,\n        \"par2\": 0\n    }\n];\n",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 440,
        "wires": [
            [
                "2f90e59b627dcfc3",
                "e6a4c9c2ab6f8430"
            ]
        ]
    },
    {
        "id": "ca7e17a8515287a8",
        "type": "serial out",
        "z": "908ffa7fd113eb03",
        "name": "",
        "serial": "39f99e4a62f373c8",
        "x": 580,
        "y": 620,
        "wires": []
    },
    {
        "id": "2f90e59b627dcfc3",
        "type": "function",
        "z": "908ffa7fd113eb03",
        "name": "Make Light Event",
        "func": "\nfunction checksum(buf) \n{\n    var sum = 0;\n\n    for (var i = 0; i < buf.length; i++) {\n        sum += buf.readUInt8(i);\n    }\n    return sum & 0x3f;\n}\n\nfunction toChar(i)\n{\n    return String.fromCharCode(0x30 + i);\n}\n\nfunction toCharCode(i)\n{\n    return 0x30 + i;\n}\n\nvar buf = Buffer.alloc(6 + msg.payload.size);\nvar index = 0;\nbuf[index++] = \"(\".charCodeAt(0);\nbuf[index++] = toCharCode(msg.payload.adr);\nbuf[index++] = msg.payload.cmd.charCodeAt(0);\n\nbuf.writeUInt8(msg.payload.size, index++);\n\nfor (var i = 0; i < msg.payload.size; ++i) {\n    buf.writeUInt8(msg.payload.data[i], index++);\n}\n\nvar checksumIndex = index;\nbuf[index++] = \"0\".charCodeAt(0);\nbuf[index++] = \")\".charCodeAt(0);\n\nbuf[checksumIndex] = checksum(buf) + 0x30;\n\n//node.warn(buf);\n//node.warn(\"Send Light Event:cmd='\" + msg.payload.cmd + \n//        \"', data=[\" + msg.payload.data + \"]\");\n\nreturn { payload : buf };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 620,
        "wires": [
            [
                "ca7e17a8515287a8"
            ]
        ]
    },
    {
        "id": "31ed19ab66200615",
        "type": "link in",
        "z": "908ffa7fd113eb03",
        "name": "Receive Light Effect",
        "links": [],
        "x": 85,
        "y": 620,
        "wires": [
            [
                "2f90e59b627dcfc3"
            ]
        ]
    },
    {
        "id": "4c10b6878c8e35b6",
        "type": "ui_dropdown",
        "z": "908ffa7fd113eb03",
        "name": "",
        "label": "Effect",
        "tooltip": "",
        "place": "Color",
        "group": "2f87ec5f09135c88",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Color",
                "value": "LightColor",
                "type": "str"
            },
            {
                "label": "Flicker",
                "value": "LightFlicker",
                "type": "str"
            },
            {
                "label": "Rainbow",
                "value": "LightRainbow",
                "type": "str"
            },
            {
                "label": "Multicolor",
                "value": "LightMulti",
                "type": "str"
            },
            {
                "label": "Pulse",
                "value": "LightPulse",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "0cb1e440d5ad10fe",
                "e73e267063030827"
            ]
        ]
    },
    {
        "id": "0cb1e440d5ad10fe",
        "type": "change",
        "z": "908ffa7fd113eb03",
        "name": "LightEffect",
        "rules": [
            {
                "t": "set",
                "p": "LightEffect",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "fd4c5ab3314f7d22"
            ]
        ]
    },
    {
        "id": "06497bc537cadc3a",
        "type": "link in",
        "z": "908ffa7fd113eb03",
        "name": "Set Global Light Effect",
        "links": [],
        "x": 85,
        "y": 260,
        "wires": [
            [
                "4c10b6878c8e35b6"
            ]
        ]
    },
    {
        "id": "e26ae2c7db463151",
        "type": "ui_switch",
        "z": "908ffa7fd113eb03",
        "name": "",
        "label": "Post Lights On",
        "tooltip": "",
        "group": "2f87ec5f09135c88",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "LightOn",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "LightOff",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "93ef3789b744786d"
            ]
        ]
    },
    {
        "id": "774a77791d961644",
        "type": "link in",
        "z": "908ffa7fd113eb03",
        "name": "Light On Off",
        "links": [],
        "x": 85,
        "y": 380,
        "wires": [
            [
                "e26ae2c7db463151"
            ]
        ]
    },
    {
        "id": "93ef3789b744786d",
        "type": "change",
        "z": "908ffa7fd113eb03",
        "name": "LightsOn",
        "rules": [
            {
                "t": "set",
                "p": "LightsOn",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 380,
        "wires": [
            [
                "fd4c5ab3314f7d22"
            ]
        ]
    },
    {
        "id": "fd4c5ab3314f7d22",
        "type": "function",
        "z": "908ffa7fd113eb03",
        "name": "LightEffectLightOnHandler",
        "func": "if (msg.payload == \"LightOff\"){\n    // LightOff goes out no matter what\n    return msg;\n} else if (msg.payload == \"LightOn\") {\n    // Transform message to the current effect\n    return { \"payload\": global.get(\"LightEffect\") };\n} else {\n    // This is an effect change. Only send it if light is on\n    if (global.get(\"LightsOn\") == \"LightOn\") {\n        return { \"payload\": global.get(\"LightEffect\") };\n    }\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 300,
        "wires": [
            [
                "e61567f4096e2f55"
            ]
        ]
    },
    {
        "id": "aa9f14bf75e25dea",
        "type": "ui_slider",
        "z": "908ffa7fd113eb03",
        "name": "",
        "label": "Brightness",
        "tooltip": "",
        "group": "2f87ec5f09135c88",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "30",
        "max": "255",
        "step": 1,
        "className": "",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "f9c573219cdcf3cd"
            ]
        ]
    },
    {
        "id": "f9c573219cdcf3cd",
        "type": "function",
        "z": "908ffa7fd113eb03",
        "name": "Brightness Handler",
        "func": "// Incoming message is a brightness value (0-255) which we \n// want to put in the global store per-effect.\nif (global.get(\"LightBrightnesses\") == null) {\n    global.set(\"LightBrightnesses\", {});\n}\n\nglobal.get(\"LightBrightnesses\")[global.get(\"LightEffect\")] = msg.payload;\n\nif (global.get(\"LightsOn\") == \"LightOn\") {\n    return { \"payload\": \"LightOn\" };\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "fd4c5ab3314f7d22"
            ]
        ]
    },
    {
        "id": "179f117e72542aed",
        "type": "comment",
        "z": "908ffa7fd113eb03",
        "name": "Effect Parameters",
        "info": "Current effects:\n\nColor(h, s, v, n, d)\n\nSet a constant color (h, s, v). Flash n\ntimes with a duration of d ms per flash.\nIf n == 0, leave lights on.\n\n\nFlicker(h, s, v, speed)\n\nFlicker light with color (h, s, v) at\nthe passed speed (0-7).\n\n\nRainbow(h, s, v, speed, range, mode)\n\nChange colors starting at (h, s, v) at a rate\nof speed from 0 (very slow) to 15 (very fast). \nRange is how far from the initial color to \ngo, from 0 (little change) to 7 (full range). \nIf mode is 0 colors bounce back and forth\nbetween start color through range. If it \nis 1 colors cycle the full color spectrum \nand range is ignored.\n\n\nMulticolor( h1, s1, v1, \n            h2, s2, v2,\n            h3, s3, v3,\n            h4, s4, v4,\n            duration)\n\nCross fade between the four passed colors.\nPassed duration is number of seconds between\ncolor changes.\n\n\nPulse(h, s, v, speed, depth)\n\nPulse color (h, s, v) from the brightness in\nv down according to the value of depth where\na value of 0 is very slight and 7 is very\ndeep. Speed is now fast to pulse from 0\n(slow) to 7 (fast)",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "334159e25dfe3937",
        "type": "ui_colour_picker",
        "z": "908ffa7fd113eb03",
        "name": "",
        "label": "Color",
        "group": "2f87ec5f09135c88",
        "format": "hsl",
        "outformat": "object",
        "showSwatch": true,
        "showPicker": false,
        "showValue": true,
        "showHue": false,
        "showAlpha": false,
        "showLightness": true,
        "square": "false",
        "dynOutput": "false",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "d0d0ccabe5682d3c"
            ]
        ]
    },
    {
        "id": "d0d0ccabe5682d3c",
        "type": "function",
        "z": "908ffa7fd113eb03",
        "name": "Color Handler",
        "func": "// Incoming message is a color object which we want to put\n// in the global store per-effect.\nif (global.get(\"LightColors\") == null) {\n    global.set(\"LightColors\", { });\n}\n\nglobal.get(\"LightColors\")[global.get(\"LightEffect\")] = msg.payload;\n\nif (global.get(\"LightsOn\") == \"LightOn\") {\n    return { \"payload\": \"LightOn\" };\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            [
                "fd4c5ab3314f7d22"
            ]
        ]
    },
    {
        "id": "e73e267063030827",
        "type": "function",
        "z": "908ffa7fd113eb03",
        "name": "Update Light Controls",
        "func": "var brightness = global.get(\"LightBrightnesses\")[global.get(\"LightEffect\")];\nif (brightness == undefined) {\n    brightness = 255;\n}\n\nvar color = global.get(\"LightColors\")[global.get(\"LightEffect\")];\nif (color == undefined) {\n    color = { h: 0, s: 0 };\n}\n\nreturn [ { \"payload\" : color }, { \"payload\" : brightness } ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 120,
        "wires": [
            [
                "334159e25dfe3937"
            ],
            [
                "aa9f14bf75e25dea"
            ]
        ]
    },
    {
        "id": "e6a4c9c2ab6f8430",
        "type": "debug",
        "z": "908ffa7fd113eb03",
        "name": "Light Command",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 400,
        "wires": []
    }
]